package Presto;


import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import Presto.pages.Search;

public class Demo extends BaseTest{

	static WebDriver driver;
	static WebDriverWait wait;

	public static void main(String[] args) throws InterruptedException {
		startChromeDriver();
		driver = getWebDriver();

		driver.get("https://www.google.ca/maps");
		wait = new WebDriverWait(driver, 20);

		wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("#scene > div.widget-scene > canvas")));
		WebElement element = driver.findElement(By.cssSelector("#scene > div.widget-scene > canvas"));

		search();
		
		Thread.sleep(5000);
		
		zoomIn();
//		Thread.sleep(5000);
//		zoomOut();
//		drag_and_drop(element);

		//	drag_and_drop(elm);
//		scroll(element);
		// Mouse wheel UP or Zoom In 
//			wheel_element(element, -500, 0, 0);
			System.out.println("Mouse wheel UP or Zoom In through Wheel achieved !!!");
		// Mouse wheel DOWN or Zoom Out 
//			wheel_element(element, 400, 0, 0);
		System.out.println("Mouse wheel DOWN or Zoom Out through Wheel achieved !!!");
		System.out.println("Mouse Scroll through Wheel achieved !!!");
	}

	public static void search() {
		String address = "25 Burntwood Ave";

		By searchBox = By.xpath("//div[@id='searchbox']//input[@id='searchboxinput']");
		wait.until(ExpectedConditions.elementToBeClickable(searchBox));
		driver.findElement(searchBox).sendKeys(address);

		address = "//div[@id='suggestions-grid']//span[contains(.,'" +  address + "')]";
		By listAddress = By.xpath(address);
		wait.until(ExpectedConditions.elementToBeClickable(listAddress));
		driver.findElement(listAddress).click();

	}

	public static void zoomIn() {
		WebElement html = driver.findElement(By.tagName("html"));
		html.sendKeys(Keys.chord(Keys.CONTROL, "0"));
	}
	
	public static void zoomOut() {
		WebElement html = driver.findElement(By.tagName("html"));
		html.sendKeys(Keys.chord(Keys.CONTROL, Keys.SUBTRACT));
	}	
	
	
	public static void drag_and_drop(WebElement element) {
		Actions actions = new Actions(driver);

		Action dragAndDrop = actions.clickAndHold()
				.moveByOffset(1536, 289)
				.release().build();
		dragAndDrop.perform();
	}

	public static void scroll(WebElement element) {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView(true);", element);
	}
	
	public static void wheel_element(WebElement element, int deltaY, int offsetX, int offsetY)
	{
		try{
			String script = "var element = arguments[0];"
					+"var deltaY = arguments[1];"
					+"var box = element.getBoundingClientRect();"
					+"var clientX = box.left + (arguments[2] || box.width / 2);"
					+"var clientY = box.top + (arguments[3] || box.height / 2);"
					+"var target = element.ownerDocument.elementFromPoint(clientX, clientY);"
					+"for (var e = target; e; e = e.parentElement) {"
					+"if (e === element) {"
					+"target.dispatchEvent(new MouseEvent('mouseover', {view: window, bubbles: true, cancelable: true, clientX: clientX, clientY: clientY}));"
					+"target.dispatchEvent(new MouseEvent('mousemove', {view: window, bubbles: true, cancelable: true, clientX: clientX, clientY: clientY}));"
					+"target.dispatchEvent(new WheelEvent('wheel',     {view: window, bubbles: true, cancelable: true, clientX: clientX, clientY: clientY, deltaY: deltaY}));"
					+"return;"
					+"}"
					+"}";  

			WebElement parent = (WebElement) ((JavascriptExecutor) driver).executeScript("return arguments[0].parentNode;", element);
			((JavascriptExecutor) driver).executeScript(script, parent, deltaY, offsetX, offsetY);
		}catch(WebDriverException e)
		{
			System.out.println("Exception caught in Catch block");
		}
	}
}